<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>写给洋洋的信</title>
      <link href="/2023/11/12/tina/"/>
      <url>/2023/11/12/tina/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="36036b936d7e81ae24b5f7f393f3970f0f91e7290f332c0a01dad7076d963ebe">4630436162ade97ba2718b7d0c4b3b630ef8b034c35893a7afa4c54a5752d90eba191a593f89497fdfca691efaf72d5caa0c664d8e7a85bd833fac72ade59ddbf66b4bdec75a2ed1e83f57bcb279b78cfc65fbc18f7606dbec4f8a0cfd661414c92c100d2773e693a5c8b2ccac7fa14accc64f83b5b264a4d5fdf6bd69eaa8f482afd099013e76ff4e51aba738e821baa622005a4c66f56ab33cf2343fe1cf2e0172f93bd31fce364b9080e27185a46d57dfee48fa7acad956c60072fcdef615172cb1bc7e001573317575587dc894bc375542083967a838fed2a0a13392565f91cfdd0c3a39cb50b68d4e4a26ae663635f6b25dd91b20e3ccaf559902123bbb6ac0ff6dae715b16782ac7320ebc22db9ddb3d33c46161ecc63333dba4af75522728fb62972c63a26af23959d36e8e49564f5448b24bac741c1fef75b4d46ffde56fe8d13c3e28f8b950ae4d5cac007ce6060fc4ddcc5ab1f0134e01db5e67e24d6ef4faa2b0070340ba0346177fafacd3ab7ef57c1499d6c7d94fcd12875d6c58ca599a963a5501ab13db0a9227283379a2c3727e829492c8809aafce2f49ccad92ed62b912fb649e9406cd1062ea6e54911e1ed812250e6908461ce990b1f18c64f4800540ae56bd6f10d01b6e160402013648915d07bf1ab73a8798223c33e890326c13eb5255c8da388085c486ecdb0043468648038c146664e193a8d26763cda4cbf73bc5fa2dc68e0c3458b5c266c34b87bfcbab1e48ef74b36fb380b7109fda20be18129875273acc33555b8843f1c24f18be4f4628244f711e1a584cc70851efcfe90f4fb2f8614d0569071534db504003dfa4f1627099a01235cbc58c9d540a9dbda3b7af453d2c9accaa9689c1ff612fdfa37042295e9405ae11ea6960d4bb418570d4883dbbd1641fee76875a50c19ea708129eb177576b70ce30db67817d8194bc0f98175569c2ab596b536bc963e9e7227b7a76296ce86192bd8b9f9e62b2fcbf37e2a3f6b9500e06ed0c6416afd62cba25034fd1cf98e0efdb23909b1e1b5f11d07582046e041ceb2f60f25893406d603900ab37d901cef19fa5199b8de6dd574a9ce3ae260c9bc118768b4a6819081870ff9ad57daa70a5d6e7239330f8a0b6b32ee30714693928ab327a7d3f99a900d5f7346a3df978d0129794cb120fa8a56f24bf4b941e6caa42bce1cbe03abda38f6b223d4dea7c971072e96694b1ecc8378edd227e3ad57def4a1309d292ac476acc17f3eae800440345a544f751fa13dd1a1223117a4ce60370f384d949b66fb84d4975f4e1134f638afe35d0508938d1a9474a178871f20d0d065a3b49a6206a8c7332f548b855dd4af6837234c8025286d4c3fea6afeac598beba5603d3450c85b69ea52f061f09d40e0d98e65ca41fd553d0fd04b5e7e18fbedf17058a3775fcf00a2cef43f14690ceab748c59db4a773150d3af16775460079190b80768d7792a22c3b639d2d1d061ff9da2dd6f2d01ead54e5b6e77bcf1518d146bc3a1d9b244761b094a26818e368fa0a245c492b0d2a706a245195d14142acf3284b56b745f31fb25c485baace15ea390bc42941c6a8c64f6799e58dd7f97fb7c7d4582b94cfe2d9d85f0df59625f97f76c52c42705c04f03e19434d5b4f63bfb9a501445c363c50f8889c50459ec9cc8de7214caf0b400ae35de72b320c8148bee627198d2ec97b49a099b34e2d8acbf5de848dff39951029e1858a2d2136b7b842ce4be02972ab1bbdc980c7f9e3e2ecc925c74d52c275305adbf77159a72f105b124aaf7a505d655ce2c7b303ed8dbebf4318459915d6a92d6249297d6a30379d4486a9d6ce71e99f3748d5bd5644daee93f9f2e575597ddebf014af5e1bfcea021f9bf12008fd476a171de9b9271fdeb70fb57f94a592a82bff857e2a94c12b4378283728dfe3b21e415dd80bfffa526ebd83ccdaf4c503ec3877244a3ed7c5d3002cabe894a2880a49010eeef92d0662022404d41f9c89934c2e529fe067b39a3ce21e022ca1adf7e3eda41535c0f97fc194f09e760bb420dd9d5141d424cbc3b3433722d23fc6e0606deff86611b90586eb0f86e852f31b8c158116bb084070f54d4ebed05cff0587c0268ebbfea7ba59d3f8a92a8e32f137a6d921a878e7b581f85e87763af84e2c10d22d6b7eeaafdf34d9d6e5d23b17d1ee5dd53b8e143a2de24cb72ce8b92f777baa3c819bcbd05160846359d72078fdeb5eaaeb20d30dea12317fdd6e33f31a003b7ab9307658aafbe52c07f858484b95eaa01f852b58881f3f88fd75b630bcc7fd3ea7fbb1795e8d78d6fdcd16821a4f2230c46e85d2409aec74fd7a960fcb48b4ed5b99f0dea7f87284d40c3d5d3c92dc285730d3029edc13cee099dd0cd77c463dd9e4ad00ac0018507e36a73e7812d1de5642915459e2e1a151321861a521c4a0e7f2f977b04c41a803d9b4ac7b492c6663d5fa7bfab618ecbc84782c74dad35966669414bf86fa80fc92aff9e274c30c5dbd08831f19f362410783dd2c7b8c7ccc5b0c61ae411cc81ca5639a05b4820d5f671d3583313eecb59d07013b029603c7a5a0c38c6cfb7b2b0e8d92e51b940f26bf19c0aa69a098e0e10c050cbea89141f60918fc3b92d9169a2b82651e8d35467710995098865a3cbdc38c515e49f7f9155c23bb86f59c698b9ff2cd742eb6786d4cc1343381cf82fa87492b7bac677c7cdb078c6c0045a84e704e0461007da61da295e728e8eddccee0515330fa9a0737eebaf7379b3873e06199704042c66d655d915a47ddede23f61fd4c9a2bdf2ceaec30c8e1c4121ffb9392347d2daa024ace8bf3be64a380462df3b9fcdd2754b0da0814de07b9f89c6d5ba31244474e6f41c1c00721ea6c178f4c9a606e1f817d988e3c6176c15578f1cad17139c81becd9d1c50865a6a247fc962a1ed1f1185b52ca2773f204138d1d511cba9958e226fc5b6a3c409a4d59ea9a97916bc6577ba2515c5400941eb13fe7ffa7e09fe0d6a13edd5ac2556d70ce33d50fb65146616b1152e65c7faff00aa4032749b1cf125745883ffc33634a83a3d7bf6466e39e901d33d36fdd943ff427c955c9c7c01804b633662fa5e26af88eec44af991ac67541294a177b26fe782aec6ef7b98745320c58e44bf0b5b396acf32c26b9116d5a5f38c5b3c1b70cb1bcd7b020ba2bc2af12421729021d2bc93451ff3fbc87841eaecdf8e4bf13a8402e850352eaa53f09b0a2160081a6d05c4f3559d716219b76380a4e9e3d336f4a7ba30ff21872dce99b1cfb3d61575a177123278cbb0e2f36c93499fe8fc3bad9678c8613252d3b3dfa4b0cfd09da7c099db386c04dbc0744a54b921abb53c17e8d51ad6392aaaf82dc69eff8d1f8890800ad167ddea73dcadc175226359e4d78fc8a963a1f70de10a12d0ccaac4ac9d99a289f7e3dc55fb49602818437a92f23cfe6c450495a10dc3580fd7ca93d20838a9c012b016e06e43b8ea3a91f9cf1e1c7f247b77fb9deee152fcc4dbda5e86775fca94706135703a7c2aba7c692b623b0336b109e3be45e6e6b90e0247e15b6e5f8b45b1b169586e4659aad511548ba01edad336992a4ae54737a779ec709775726dff89ac29aec268095c85674c72668a407b7d8c3c5d0003c6cf56620550d17037dd531832f6b08291b62bb6ac571d8430ecccbe252418c742751764d68b717b2479ffd95c2079008f259b141ed97c87a74f1dd2742067b98f2d1ce52cbbec237e27af819bb06fbc4cdc05826b872c8edfeeebbecd95d5fb32709f25614aa3e753c46eea202d73405664b07406e7deb91472316c1dec2b5953548617d5ec1cda2c5180b91b5c16b12ed144ffab02f65dc7175b75ce89cdd30419898e0f5da84a32783c89b469e53f82949c2e5a3c29578f1aa002eb84eba54b4a7b10aa580bd5ca6506e4fe828ca17df3f2baa2c1df101415faff9952d83e68f2d90650b3e274b35a1bd62922f4f4deba86f658806dd189a00812f398a18c974dc50e84f0cb47430141850050961acf2f54c753383f505e3e569824f2955b22cba61cdeb2898837ca38dc5eb2b4d418e25f23b87a747aae807a6d0d91c0e042e070830710414066469056ef63de08998b9f15118e0649bc7f519acad44bdb7298c56fe5bc08222c03d3fca97f37e84cea5523ea3c92f90eb857bc51df21f019e966dae65d838a708f2221ad22d085cd29a9d2ba6a24bcfadb1a578545c88f585fac0d929be43663c18487537cb9313943d95c3cfda8fea869c40aaf4712d883ac74548c785b9058d2829b2652b3f228a44d59b5f4ee781f2601fbc96c4c2e4c4e1525b6f1d5e4faa1ac307a4f0a782e5aa4b81c7cc92fa61f8d09a9044a17500fb6b2a0e8734cad85de47c9a0b0d16b5680788a4496f9c8c151a843213a1b3f56c8138d926b0addd2f1a8a5b82aa10f1999e122759259e90fc4c598543e5c211e8e358f82fdd619e6da52e52e76271d882ac468dd5ca8e6407a8a9a27e4a62cb57fb1b57913625349b623edbde369bc9554184e775af03bc7b3a396ac70842d6c2770e79bccbcbc23cb9e7cdd1ae09d8b77cd8f17846297fae2e1b394573183da2160e7369ab2146a9566c9167831fffa2d74aabcb130defe6df7e0af08fe5c44529af961eaa04e092067335724712da246a5d08919d15e6f37006e5fed28d121065bf24c07dd50d736884c358b20439ed5cda3aa3363d963d5ad38966d3e049e74ebb7025e9e3cb5cdc84d9f5c4f6463144f291f9021251010100b0b1e15a96dabcfe35d4b45f21b17227efccdf20ad4fee995bff23230db72cf78fbdc3815b0cfccc4226520c4555b9f2b4ca6e7e0770a139ae774db975eab1a6a680cb21d23d8e1f092e61836915d6e5601a4bf407c436d41b6c8017763d286bc823934b546d7e38d3578d9a2cb8c9658d39b60b26c198659cb634205e4024a4e6a17de70e905d6c5dfcc0293c75ec66aa0f2390a6099f5b86294e558c719721c2948dcd00405c1cccab37d99d984db5cf58b4e4a5d1196653a2f9f1258be79af2df8ca3b24c353c52ca19a1085fb40ea214ccbfb521188a12fc9776396df92a56b6f37068f4c40fa5d8bab7b6bb5636b184cd98234599d6049d447d4b74ae832a684ca068472fbb7f6f030c293553ff9c5251cdfdbc49eb6f9a0a25660ff76ba45d887131afbe50c48ca9c0c60366b0ee0654e087f85baebfd01a796a58b7f0f150d48489ab1e8746fdc24cc84c665e3cdaf5dda816003e528aecf03d9c0b373528cb3c553f7abc6898044ffea8937c3751322e1030893cdd5acfdcc950f01cfcf9c983c7fe491f7721464d54ec3b20e31b2818075babcedfaac1401d56fbb35c231c14857488f45e298cafc8725897915adf5711766a811e4d7f3c5a96f5e20dddf49a8e3cd00dc15a95c5f6164926659ce8eddab8398d7355e994d985fda18f82cbd818141235d35bf4978ee7debe1f062906158e644f4e579f220892ab2c1f4cc38ae9f61886fa1a546c95d6d59a973cbdbe10cb1bb0fd3085cc0f75fbd5a28dd29087c6e37e04c68e84e7de8830799fbb09496a34fdd38ea54b9a6ec18e4cae400b48abc6f79f13c37e5998597ccbcca0157622473343278634745490b80eff6d1f77ca555f1cdbffec0a675486a884b2f3858e9da50f59ba6ba2f36267549123791ec2a4befca31612757216a6a4f64a9635566ed48b54db9c433028027a2a59a0eb5bd81ee7a3114035d49651bd8e034df0d042b7245d73a5416aba911c2dbb50657222bfc4039f089ce4d2df0d53df74011813cea7d0105a24e36239229a045245d286932c67d0cb51e34e582a31bff201a2aca1d264489f864e7bc37a46806c5a1e23eb52baa5543f0f56873c7c70e770bc4265724118dd0538919ef8641aeea666e96ae836fff2a6bd9ac86543b2c6187c04563799d81bcc843724e6500507727ab116adefa72c387365d5c54555ec63f00364ee35f7fba12eba1baec30ebfbf2c311643d35908ffcc1fa161ea0d7c95b2d0f6db3357feb6c0237bcb78569687f2de0f8e6287acb98bbfa1489d709dc7bbef68d74a73d24d8afcdee347a64d4b24046cf0e0ae2dd5b871bfb633bd20b596fe72c63f65c71390d2e8e22ea19c47c930f8954397fe1744851e8bec42ce3fdc4ee50acbcd828d7ec770d7ebb8dce1ff9f39dc69d8fbea921f15fd6ae66afd5a797d319abf17569ed961254073abc7cf47097da0c18f53d8cec59a5bffd626ace4c9d6a6709dd3b02e5d74949a8176375663affd004654c1c5b8dff17fd3d77d872e5dd0ede90566af5e6357853e95b422035fabce2ea61fc0996cfc5b6dc6c9bece533a92cb0bdf2e49afc11e0a7b7cc71dee6ce0d62b44e91646f0c579ba97c063348cefc8a477d42a513caac4b81f7d40ab2edc59050223c3a5ef449c3d4b19b42147977f2909d581ba2eb04060ddec32821f48b6ccf93134ccb3750fee3b39b7c9e7dfa9d64b811eed42eadd99eed86756fcbfdb0f63ee9ffca72c7ef3f575b00a4e71b84b8e72405acb290feec987d68b3086c4bd63c6e3ca1472a645271fa489bd3bf17de17e81a4eae713c565ef6c14b09d07e6a8ebc6fc4248c82fa5fe8c53436f3e5e5ad64e2250a0f4c5350538fe18b38a6797d3577469685134a5049b8e44cf23ee19ae8860c426ec44ff4f50207cb853df2b88d8da7fdda691109a1d60b7ae3379679ba171d2e76c1df22908d0882943aa1c843d140e53a6c08bf8611b5a07b90a780064a16972b31eee4a1e0683aa01edbae10ac672af18f57ebffc38fabc5c4458bdd458e2a86bd7965867a17456373dd6d5a83e76981636e57b82ead84b688d33efc09f466eab4e80f13ed83da73f050d17a98c80e5dc834e2e0ae0f0f5ebc503ef6021657d4397d2ff0957b1a99dbd9c1bc7dbf9aa5b39c65fc6536e6b6da1d686830ab63443eafa1746ccdbabf7d0526ad437b287244b789b8061135fa994ea7deed8ec4e49d5e7253546bf29f8cc361b8ded3c7aaf1468038fce5b03975b44aeac67f3890cd9671067e9cb52f6e6d2042a012647ba518d9eb2ed758a659d7cd668e93a66cdf97b3986654bd670c6799642ef96a10e88a5300c64e09097126afbfecc3880192b1d24245940252943efb040c14bcc2753f6f8c0e2877f933eb36d60db716c59fd46409eb767e60563bc77a7ba49927acd2b706a4c0095f18d6f6365b2c25f820658d4f18ec92af1be6f242bddebf94a1cda53e5848c82b8c768ac52be64257da3e796ef502f71d7768b05100bdd503e6a3817aef009803fa913278b9552cfcb24800242a65f90ab86bc8452220383abbcd73bbacffc52e6ea04ce00a53e6ef1e5dee3c9d4f81430918e9d0dc557cbf952e410fe53f94c68acf769e958e10274a7832947bca3c67ea24aa9639c1d111ff63d1f806f30284077be87d4f26518db06f0c789454e261b21e920a6c2503ea6c9c012c797aa7b8ba5be666f419a891a3614b5552c20943189d361feeab99dfcb0aba2168d14ae9ed636e1a54cb44bb8032b486b48cf691b3e1bbddc32d01c2b8adadf90042043f5b095089dd405581574b06a2e4ccb9c0739553088d5cd49faa36fc8e32968895c634a85b904a8cf20f02c2c7428e94d4b3017fc0fed8f498c63fe1c47cfc48c5c12d296d3cdde4302a84b6b547fc180d8d24b02f9ff25a79f6980d606c4b82c983778c5efdf1b744d229dc95389735136ba903347f09469a457d328fb50d612d3cab47e53eaa35dd4a268882badc2f2ae21212fda9901ab3bbf7b52536db624539af40bb29bb6beeb2750313ede7171326f218e232bf4c7933079cc5f9aaa920114e2ba3a8f9dc017055050ab1ba3a587e604866d54f1d4569f54c67de41e1cff344900504fd464acd60e4d4f13af61a3dba741cd7c3d796664f785579944db6fd20440842fb614be088d3b2039cfda862c50ad525c23867ba5740a41436bf9bebdebae404e7ad5b821efa2393ed289b4bb2c5b17990d2824f3d2d591092a2b15829466cda260cfb3cb0e0904de87a0ba6197c6bf4f4e21ac5d41722df7a963bc49055351dbb2169d4f823835a53448ae16cc5615e5668ae06ba5f83a2053fc6a02dba8625cdd1ab62931870d312af6d491aad4f3b414a3fe8eb392d1ed218ab68640f704e099ea9fde66dc402c698447a4bad16a5a0091c4f7d4737ea49595324ebde9a094633405f95030f098791d998d48ea81bfabcf5b1a54aac56e597ce969586a05dcb4ef819dc321d7eb414d48152826f3e029af1fce3e37677ecc888270bb261e6faafa916e66e7fa2b24101a39db6ecf9b68e6959957c7badd17b985464af349e6600f2ae572e787731d98aee97e07ae549c6cb8dbb850a19f5d06e9343af40847eda0f1583fd0ca41f9f067e9a0832e1da9613df92a5c9bddd5a4226c72f3d47f1ef01c31b4f3795626b395980dd4d4ef0da8f583096c0b88594a763591f75cc99965f0ac46723fc4150f061bae0e597e6b77e818bf98b3acfb019bf84efca170659d4a49b58617a1938a7316a1a51b307dbbe1cd13fa94eac87907f1c5451b2d1c15122ffef19c088c458d9bbab67cfa7971e5b6c2c22113eaae421cd2af59b8c2bd07bca13a77a5cc27d278739fcb1b3c3241e6d650256a8c9290948d009aeb375dd3ffa68a4e05c65d61a1bffdadcf6062c3a617fac7005c0b011a7ad48967024c77600763adb22e38cad818290199e9a0649a47602305cdae39004966621589adb0c764f5172c230fe727760e7379ac5e2a358f28605b27fb8fd9bbefa4a5c9b1233b15a7951925a657bc13a30d1cc4e69f54b70fa3ab25daec8b3522f73122c4952f8e268df50fc15e3ab74a9e4b2dcee6d6b3df9f677036fae84dc236bce20244c6c1f860569432ce9a68653bf8b9abb39c9a02e2b8de371b47211573a86e4d6829da3ac7a12fad3e196292bd86fa2af944f0eabffe733991ed527ae61d80f69a6732dae6f406130e5c4afcf9ceefd1f4b41b2090d3682ec0012ffaba3297b21f7dca157b31ff81ce15e51fdec5eaf34e86ab8a326d43777ff410590e5578ecf8baf068a4d073e5f60e756bea74aa6447b906589c5ddb6e726517160b805eee05939e0c3450a3e1747f10bfa7d673464b96bb0833ab70e8db1604a8ac52b48aacfbc43e658c2240b6d1f23b26ec216bdf857c80f6263fa09d9ea6642ebbe9914ed5dafca02820e7d57f9ac4a07e85b365431b5895d7274ee8896ac07c8d75a67b0002d3763ed71cb4ed397f467d8393acb1c49cd6eee5cf10e01c3deed8038585c3e94610559ea98df35ba21dda7d945fa05417e7d9a10b63c190bfa3e8fad4823b413d9361fb075d85846d05883178f71ce32fb35876335a172621ad3a89a674c4fbe31db54b1256c966e41c53c4ea6d7313e9fec744f33af8d2ce64b6d0bc8c2ebf207021065f53e94503e62556bdac15e61b736887108be9e70b4070d387b8af111641860c8f5cf9cb531b52b658c183635ec00fc92de353c7ee23e46244b73e6d90957f29bc06bf81e4d5e4c789ca1f54ffdd1e97d33cc883c9ebca1d1d155922d5369fff3372c453273b82d5dfb0144290e049ef205d5044ebfa08c98fece66f3fda5703cb8715caabab520fbb45125eaa4b84e105fbbc33b7e7c393a5d471bbe03d0d335d7226ae70fba77d4fcc73a625d516a3e614708ea0c3e836552ae4d8b8ebb47ca7a1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次C端性能优化总结</title>
      <link href="/2023/11/08/optimize/"/>
      <url>/2023/11/08/optimize/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>如果说b端比较重要的东西是核心链路的打通，那c端应该是最看重交互体验相关了。<br>半年前我们上线了一款新的项目，是一个端内h5。随着该项目的渗透率不断提升，保证线上稳定性和保证用户体验就是最重要的事情。<br>根据监控我们发现该页面的体验似乎并不是那么好，这里指首屏速度，直观的感受就是有明显的卡顿。</p><p>虽然我们对接口进行了优化，但整体看下来，页面的首屏速度还是不够快，这将影响用户对于我们产品的认知，也会影响到回访率、留资率等核心指标。<br>所以我们必须要用前端的手段进一步优化。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在做任何优化前，我们都应该先了解现状，了解现状需要通过指标衡量，在这个case中，由于框架层面已经提供了传统的优化手段，所以我们使用传统的浏览器性能指标就可以满足诉求。</p><p>在传统的浏览器性能指标中，FCP通常会被用作分析页面首屏速度</p><blockquote><p>FCP (First Contentful Paint) 为首次有内容渲染的时间点，在性能统计指标中，从用户开始访问 Web 页面的时间点到 FCP 的时间点这段时间可以被视为 无内容时间，也就是说在用户访问 Web 网页的过程中，FCP 时间点之前，用户看到的都是没有任何实际内容的屏幕，用户在这个阶段获取不到任何有用的信息。</p></blockquote><p>所以通常会反映页面的首次出现内容的时间，而首次出现内容时间会反映当前 Web 页面的网络加载性能情况、页面 DOM 结构复杂度情况、inline script 的执行效率的情况，当所有的阶段性能做的非常好的情况下，首次出现内容的时间就会越短，用户等待的时间就会越短，流失的概率就会降低</p><p>我们分别分析了pct75分位、pct90分位和99分位的fcp</p><p><img src="/images/optimize/fcp.jpeg"></p><p>我们发现大部分用户的FCP停留在2000ms左右，个别用户则是8000-9000ms，为了保证大部分用户的交互体验，我们决定使用pct75分位fcp作为性能衡量标准。</p><p>实际上，这个页面我们使用了全屏的骨架屏，但这个骨架屏并不能触发fcp，对于该指标，”内容”指的是文本、图像、<code>&lt;svg&gt;</code>元素或非白色的<code>&lt;canvas&gt;</code>元素。<br>所以骨架屏只是一个进阶版的loading，对fcp这种性能指标并无收益，我们需要其他方案。</p><h1 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h1><p>有了具体的性能指标，我们就可以针对该指标制定方案，由于这是一个端内的页面，并没有端外的强诉求，所以结合环境，我找到了以下几种方案</p><h2 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h2><blockquote><p>用户首次进入页面时，将应用渲染根节点（一般为 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>） 下的 DOM 内容保存到端内，用户再次打开页面后，客户端会在浏览器加载 HTML 之前，将之前替换为上一次保存的 HTML，最终浏览器在解析与渲染页面时，就可以立即加载出更丰富的 DOM 内容片段。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>如果命中snapshot，fcp会有较大的提升</li><li>接入成本较低</li><li>维护成本较低</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>依赖端内SDK</li><li>无法封装成统一的SDK，不同case需要按场景接入</li></ul><h2 id="NSR"><a href="#NSR" class="headerlink" title="NSR"></a>NSR</h2><blockquote><p>一个 React 项目的渲染实际还经历了「Evaluate Script -&gt; Data Fetching -&gt; Render（Create V-DOM &#x2F; V-DOM Diff） -&gt; Commit -&gt; DOM」 的漫长过程，为了避免这部分耗时，可以封装一个SDK提前渲染好页面的 HTML Markup。</p></blockquote><p>简单的说，就是在上一个页面提前加载好落地页的资源，然后在落地页实现秒开。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>如果命中NSR，fcp、tti等性能指标都会有较大提升</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>对场景要求严格，需要落地页有较高的转化率，因为需要前置加载资源，低转化率会造成大量不必要的服务端压力。</li><li>开发限制，浏览器端特定的代码只能在某些生命周期钩子中使用。</li><li>需要前置页面停留时长较长，前置页面停留时长过短会直接降低NSR命中率，降级后NSR反而会影响目标页面性能。</li><li>依赖端内SDK</li></ul><h2 id="SSR-x2F-Streaming-SSR-x2F-SSG"><a href="#SSR-x2F-Streaming-SSR-x2F-SSG" class="headerlink" title="SSR &#x2F; Streaming SSR &#x2F; SSG"></a>SSR &#x2F; Streaming SSR &#x2F; SSG</h2><blockquote><p>SSR，是 “Server Side Rendering” 的缩写，即服务端渲染。SSR 的运行流程是服务端完成静态 HTML 内容的生成，并直接返回给浏览器，这些静态 HTML 的内容需要经过 hydration 后才能进行用户交互。</p></blockquote><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>不依赖端内SDK</li><li>命中SSR，fcp、tti等性能指标都会有较大提升</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>改造成本高，如果是新项目还好，老项目迁移成本太高了</li><li>维护成本相对较高，对于不了解SSR的同学来说，维护SSR项目可能会有一定成本。</li></ul><p><strong>考虑到该项目的跳转入口较多，并不依赖前置页面，且无端外场景的强诉求，我们最终还是决定使用Snapshot</strong>。</p><h1 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h1><p>确定了技术方案，我们终于可以实施了，但是在实施前，我们还需要考虑一件事情：<strong>AB实验</strong>。<br><strong>公司能够稳定运行是靠业务支撑的，而做技术如果不为了业务服务，那也只是闭门造车而已。</strong><br>所以我们需要设计实验方案，验证性能优化对业务指标的提升。</p><h2 id="服务端实验or客户端实验"><a href="#服务端实验or客户端实验" class="headerlink" title="服务端实验or客户端实验"></a>服务端实验or客户端实验</h2><p>在似乎不应该是一个取舍难题，但他确实让我权衡了很久，如果使用服务端实验，团队内部已经有较好的实践，至少在开实验这里，我可以毫不费力的解决这件事情。<br>但是这是一个纯前端的技术方案，如果使用服务端实验会造成曝光不准的情况，简单的说就是所有用户都会被分流，所有用户都会被纳入实验结果的统计中，这将导致实验结果不置信。<br>客户端实验可以实现精准曝光，但客户端实验都是由客户端同学主导的，让客户端同学配合自己做这件事情显然不太现实，毕竟这对他们来说是一件毫无收益的事情，所以如何让前端同学自己主导客户端实验就成了一个问题。</p><p><strong>既然没有统一的方案，那我们就制定方案</strong>，具体方案就是和客户端对齐实验流程，升级JSB，使前端有统一的方式去获取实验数据。</p><h2 id="如何应用实验组和对照组"><a href="#如何应用实验组和对照组" class="headerlink" title="如何应用实验组和对照组"></a>如何应用实验组和对照组</h2><p>snapshot的开关是配置化的，而获取实验结果的时机是在js执行阶段，我们显然无法通过配置的手段控制snapshot的开关。所以只能通过是否使用snapshot的api来控制开关。</p><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>其实不管是否使用snapshot，任何方案都需要考虑降级，snapshot的降级是很容易做的，因为任何原因所导致的降级都无法正常使用snapshot的api，所以我们只需要保留历史的骨架屏即可。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>其实在整个过程中，最困难的不是技术方案的调研和如何敲代码，而是将资源聚合在自己这里。<br>snapshot的运行需要公司内部sdk的支持，但是我们的APP IOS侧并未全量接入这个sdk，在我最开始做这件事情的时候，我得到的消息是&gt;&#x3D;778就可以使用这个sdk了，但实际上，当我把方案在安卓端跑通，但死活在IOS上跑不通时，我才知道原来这个sdk的开关是由另一条业务线的实验控制的。</p><p>现在想起来，其实这才是我遇到的最大困难，因为ios侧即使开启了SDK，但是snapshot也跑不通，我需要IOS同学与SDK侧的同学帮我调试。<br>让其他业务线的不同职能帮助我与第三方SDK同学调试，这基本上不可能，对于其他业务线的同学而言，他们应该会想：滚，别来沾边。</p><p>这使得项目被卡住，这也让我意识到一点：<strong>如果我不能将研发资源聚合在自己业务里，那这件事情一定会失败。</strong><br>这里涉及很多个点：</p><ul><li>方案顺利落地：只有研发资源在自己业务线，方案才能继续推动</li><li>风险控制：风险控制应该已业务线为维度，我们不该依赖其他业务线，我们需要自己开实验控制SDK</li><li>命中率：如果其他业务线的实验未带来收益而导致实验关闭，那我们业务的ios用户将都无法命中方案</li></ul><p><strong>所以，为了保证项目顺利推进，我向我们业务测的客户端同学提出了技术需求，走正式的需求排期，同时也有测试接入，让整个项目的流程规范起来。</strong></p><h2 id="数据消费"><a href="#数据消费" class="headerlink" title="数据消费"></a>数据消费</h2><p>解决了上面的所有问题，我们该考虑数据消费了，公司有统一的数据消费平台，只是自动上报的性能指标并不能满足诉求。我们希望可以以最直观的方式看到实验组&amp;对照组带来的差异。<br>通常情况下，数据消费平台都会有两个基础而又核心的部分：<strong>指标&amp;维度</strong>，就像是一张表的横轴和纵轴。<br>在这个case里，指标是pct75分位fcp，维度是实验组&amp;对照组，数据消费平台当然不知道我们的维度是什么，所以我们需要手动上报性能指标，同时带上我们需要的维度。</p><p>除了性能指标，我们还需要关注snapshot命中率，SDK命中率。<br>因为不确定项目对实际用户的影响，所以在设计实验的时候也比较保守，最开始实验组&amp;对照组只各开了25%，然后逐渐放量到50%，等拿到业务收益后再推全实验组。<br><strong>这样做不仅可以控制风险，还可以更好的分析数据是否符合预期。</strong></p><h1 id="产出-amp-收益"><a href="#产出-amp-收益" class="headerlink" title="产出&amp;收益"></a>产出&amp;收益</h1><ul><li>整理snapshot接入文档</li><li>整理SDK使用文档</li><li>整理客户端AB实验规范</li></ul><h2 id="技术指标"><a href="#技术指标" class="headerlink" title="技术指标"></a>技术指标</h2><p><img src="/images/optimize/1.jpeg"><br>可以看到，在一定程度上，实验组99分位的速度比对照组75分位还要快，这个提升已经非常明显了。</p><p>然而单用fcp这样的指标并不能很好的衡量页面性能，比如在这个case里，使用snapshot并不能提升TTI，snapshot只是前置了页面展现时间，而TTI还是依赖接口速度。所以这时候我们应该考虑使用<strong>离线化</strong>方案，当然我们也确实接入了离线化方案。</p><blockquote><p>可交互时间 (TTI) 是测量加载响应度的重要实验室指标。该指标有助于识别看起来具备交互性但实际上并非如此的页面情况。迅捷的 TTI 有助于确保页面的有效性。 引用自 <a href="https://web.dev/tti">https://web.dev/tti</a></p></blockquote><p>离线化方案的优化维度和传统h5不一样，传统h5的优化无非就是代码的调整和资源的前置、加速等，但是再快的下载速度都比不上直接读取本地文件快。</p><h2 id="业务指标"><a href="#业务指标" class="headerlink" title="业务指标"></a>业务指标</h2><p>我们分析了线索UV、留资率、页面回访&amp;停留时长，指标均为正向。</p><p>关于性能优化对于业务指标的影响，首先你要相信，性能优化带来的收益最终一定会反应到业务收益上，如果没有，<strong>那就是性能优化的幅度不够</strong>。<br>举个例子，当前页面FCP是1000ms，然后你从1000优化到700，业务数据并没有提升，但当你优化到400的时候，就会有用户觉得，这个页面变得好快啊，而正是这一点的心理反应，可能引起他们的积极情绪和认知反应，从而业务数据就会提升。</p><h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><p>做到这里，这件事基本上就算是做完了，不过仔细想想，真的做完了吗？其实没有，作为一个技术专项，我们应该沉淀一套开箱即用的SDK，而不只是提供接入文档。<br>只是SDK的现状并不是那么稳定，我们需要考虑很多个点：</p><ul><li>是否有必要开箱即用？因为即便可以开箱即用，业务方还是需要根据业务诉求去定制快照</li><li>iOS sdk不稳定的原因是什么？</li><li>配置是否可以收敛到业务测？</li><li>配置流程是否可以自动化？</li><li>Snapshot的配置是否可以收敛到脚手架？</li><li>除此之外我们需要提供一个通用的snapshot的SDK</li></ul><p>而想要解决这些问题，那又可以开一个专项了，至少对于这个页面的性能优化而言，我觉得已经可以了。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这不仅让我想起学生时代准备面试时，有一道经典问题：聊聊性能优化。那时我肯定会和面试官聊webpack构建性能、传输性能，然后再讲讲网络层面，讲讲CDN啥的。现在想想，有点好笑。工作几年后才切实的明白，<strong>性能优化这个事情一定是case by case的，不同环境，不同场景的不同技术方案都会有不同的优化方案，没有一成不变的方案，尤其越是上层的优化，就越不成定式，就越要和业务结合在一起。</strong></p><p>这篇文档记录的东西，我可能这辈子再也用不到了，他甚至不算一篇技术文档，因为一行代码都没有，但最重要的是如何思考和如何从0到1做事。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理一些特殊场景的第三方库</title>
      <link href="/2023/08/08/package/"/>
      <url>/2023/08/08/package/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整理一些工作中遇到的特殊场景会用到的开源库，大部分都比较基础，可能一辈子都用不上，但是还是得心里有个数。</p><h4 id="虚拟滚动"><a href="#虚拟滚动" class="headerlink" title="虚拟滚动"></a>虚拟滚动</h4><p><a href="https://virtuoso.dev/">Virtuoso</a></p><p>虚拟滚动的场景在工作中并不常见，就算见到也不好直接手写，用开源的库会好一些，通常情况下，可以封装成一个通用的基础组件。</p><h4 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React Hook"></a>React Hook</h4><p><a href="https://ahooks.js.org/zh-CN/">aHooks</a></p><p>开源好用的hook库，这个还是比较常用的。</p><h4 id="H5表单"><a href="#H5表单" class="headerlink" title="H5表单"></a>H5表单</h4><p><a href="https://field-form-react-component.vercel.app/">rc-field-form</a></p><p>封装基础Form组件会用到</p><h4 id="WEB-3D"><a href="#WEB-3D" class="headerlink" title="WEB 3D"></a>WEB 3D</h4><p><a href="https://www.babylonjs.com/">Babylon</a></p><p>基于webgl的3d渲染引擎，值得学习。</p><h4 id="移动端拖拽-amp-动画"><a href="#移动端拖拽-amp-动画" class="headerlink" title="移动端拖拽&amp;动画"></a>移动端拖拽&amp;动画</h4><p><a href="https://use-gesture.netlify.app/">@use-gesture&#x2F;react</a></p><p><a href="https://www.react-spring.dev/">@react-spring&#x2F;web</a></p><p>这俩兄弟相辅相成，可以做很多移动端的拖拽动画效果，比如下拉刷新。</p><h4 id="文件操作相关"><a href="#文件操作相关" class="headerlink" title="文件操作相关"></a>文件操作相关</h4><p>find-up  寻找当前目录下的文件</p><p>fs-extra 文件读写</p><p>comment-json 更好的处理json文件</p><p>path 路径处理</p><p>prettier 格式化文件</p><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><p><a href="https://driverjs.com/">driver.js</a></p><p>h5预览高亮dom会用到，或者一些新手引导会用到</p><h4 id="性能监测"><a href="#性能监测" class="headerlink" title="性能监测"></a>性能监测</h4><p><a href="https://www.npmjs.com/package/web-vitals">web-vitals</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是如何使用自己的mac的</title>
      <link href="/2023/06/25/mac/"/>
      <url>/2023/06/25/mac/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h1><p>这里是一些我经常会使用的软件。</p><h2 id="hammerspoon"><a href="#hammerspoon" class="headerlink" title="hammerspoon"></a>hammerspoon</h2><p>这是目前为止我最喜欢用的一款效率办公软件，<strong>核心功能是为mac绑定各种快捷键，减少鼠标操作</strong>，从而提升工作效率。除了快速的打开应用，hammerspoon还可以通过键盘来操控窗口的大小和位置，鼠标定位等，可以让用户随意搭建自己喜欢的工作流，在这个过程中，完全不需要鼠标的参与。比如自从我开始使用hammerspoon后，就再也没有用过mac的全屏功能，虽然滑动切屏很有趣，但我更喜欢直接打开。</p><p>hammerspoon的本质是提供了系统api的桥接层，用户可以通过编写<code>lua</code>脚本来做很多系统层面的事情，当然，社区提供了大量有趣的配置文件，我们可以直接使用，我个人比较喜欢<code>awesome-hammerspoon</code>。</p><p><a href="https://github.com/Hammerspoon/hammerspoon/releases/tag/0.9.93">hammerspoon</a></p><p><a href="https://github.com/ashfinal/awesome-hammerspoon">awesome-hammerspoon配置文件</a></p><h2 id="ITerm2-amp-oh-my-zsh"><a href="#ITerm2-amp-oh-my-zsh" class="headerlink" title="ITerm2 &amp; oh-my-zsh"></a>ITerm2 &amp; oh-my-zsh</h2><p>想必每个程序员都会使用的默认终端替代方案。可以在官网自行下载，这里也搬运一下。</p><p><a href="https://iterm2.com/downloads.html">iterm2</a></p><p>oh-my-zsh下载方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;$(curl -fsSLhttps://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span></span><br></pre></td></tr></table></figure><p>on-my-zsh有很多的主题可选，我最喜欢的是<code>fino-time</code>，很好看。同时，iterm2也可以设置一些启动的快捷键，比如我的快捷键是<code>option + .</code>，通常情况下，我会开启多个终端管理我的所有项目。</p><h2 id="utools"><a href="#utools" class="headerlink" title="utools"></a>utools</h2><p>强大的插件生态，可以轻松的支持各种办公诉求，是mac自带的聚焦搜索的升级款。</p><p>通常情况下，我会用他打开一些系统软件，比如网络、设置等，因为其他应用软件的打开方式都被hammerspoon绑定了，utools刚好可以查漏补缺。其次，我通常会使用utools进行翻译，utools自带的翻译支持百度、有道、腾讯翻译等，非常方便。</p><p>除此之外，utools市场拥有大量的插件，比如OCR、计算器、chatgpt、还可以轻松查阅各种语言的文档，还有很多有用或没用的插件，十分有趣。</p><p>最后utools也支持一键唤出，默认是<code>option + space</code>，使用起来非常丝滑。</p><p><a href="https://www.u.tools/">utools官网</a></p><h2 id="nvm-amp-fnm"><a href="#nvm-amp-fnm" class="headerlink" title="nvm &amp; fnm"></a>nvm &amp; fnm</h2><p>每个学前端的都应该知道的node版本管理工具。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一键安装</span></span><br><span class="line">curl -o-<span class="attr">https</span>:<span class="comment">//raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh| bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .zshrc中添加环境变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">NVM_DIR</span>=<span class="string">&quot;$HOME/.nvm&quot;</span> </span><br><span class="line">[ -s <span class="string">&quot;$NVM_DIR/nvm.sh&quot;</span> ] &amp;&amp; . <span class="string">&quot;$NVM_DIR/nvm.sh&quot;</span> </span><br></pre></td></tr></table></figure><p>不过现在nvm其实有点过时了，<strong>现在比较推介fnm</strong>，nvm是用<code>Bash</code>脚本语言编写的，而fnm是用<code>Rust</code>编写的，懂的都懂。</p><blockquote><p>fnm 通过 Rust 语言提供了更快的安装和版本切换速度，并使用静态编译的方式打包二进制文件，因此不需要安装任何其他依赖项。此外，Rust 还提供了内存安全性和线程安全性，这使得 fnm 更加可靠和安全。</p></blockquote><p>使用fnm后，开启新终端时就不用等2s了，每次加载nvm的配置文件都很慢，<code>Rust</code>yyds</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装rust环境 装过的就不用再装了</span></span><br><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1<span class="number">.2</span> -sSf <span class="attr">https</span>:<span class="comment">//sh.rustup.rs | sh  </span></span><br><span class="line"><span class="comment">// 下载fnm</span></span><br><span class="line">curl -fsSL <span class="attr">https</span>:<span class="comment">//github.com/Schniz/fnm/raw/master/.ci/install.sh | bash -s -- --skip-shell</span></span><br><span class="line"><span class="comment">// .zshrc中设置环境变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="string">&quot;$HOME/.fnm:$PATH&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;$(fnm env)&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Charles-amp-Proxyman"><a href="#Charles-amp-Proxyman" class="headerlink" title="Charles &amp; Proxyman"></a>Charles &amp; Proxyman</h2><p>在整理效率软件的时候我在想是否要把Charles写进来，因为严格意义上讲，Charles并不是一款效率软件，而是一款办公软件，之所以决定写进来是因为其实在一些大公司中，代理相关的工具一般不会使用Charles，而是倾向于集成在工程内部，这样不仅提升了办公效率，也对新同学更加友好，而带来的问题就是对新同学过于黑盒，一条命令行语句就能完成所有操作，反而导致出现问题后无从下手，无法排查问题。</p><p>所以我觉得，熟练使用一个第三方的代理工具，并且知道自己在做什么是非常重要的，这样即便脱离了工程化工具，也能轻松的做很多代理相关的事情，这也是一种效率吧。后续我会专门写一篇文章来讲一讲Charles的使用。</p><p>当然，Charles并不是唯一的代理方案，<strong>现在我可能会更推荐使用proxyman</strong>，听说性能比Charles好很多，还是很香的，以后可以考虑用一用。</p><p><a href="https://www.charlesproxy.com/">Charles官网</a></p><p><a href="https://proxyman.io/">Proxyman官网</a></p><h1 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h1><p>这里是一些我常用的Chrome插件。</p><h2 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h2><p><strong>一键切换是否需要系统代理。</strong>小工具，大作用，当我们不希望当前浏览的页面被系统级别的代理所代理时，这个插件可以帮助我们完成快速切换，非常方便。</p><h2 id="ModHeader-amp-Requestly"><a href="#ModHeader-amp-Requestly" class="headerlink" title="ModHeader &amp; Requestly"></a>ModHeader &amp; Requestly</h2><p>ModHeader是几乎每位参与开发Web应用的互联网人都会使用的插件，可以<strong>轻松快捷的添加、修改请求头、响应头。</strong>在使用泳道模式进行开发测试的今天，这样的小工具会非常方便，虽说代理工具也可以完成这个插件的所有工作，但在浏览器中快速的启动难道不是更香吗？</p><p>ModHeader最大的问题就是，不能为规则命名，通常情况下我们会添加多条规则，其实很麻烦，并且同时开发多个项目时，容易不知道哪个规则对应哪个。Requestly解决了这个问题，<strong>Requestly提供了更加规范、更加体系化的功能，可以使用户更加清晰明确的管理自己的规则</strong>，很好用。</p><h2 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a>Vimium</h2><p><strong>在浏览器中使用vim的操作处理一切！</strong>是不是很酷，然而vim的上手成本较高，在提效前会有很长很长一段蛋疼的时间。其实我自己也并不熟练，但是翻页什么的还是可以用用的哈哈。</p><h2 id="沙拉滑词"><a href="#沙拉滑词" class="headerlink" title="沙拉滑词"></a>沙拉滑词</h2><p>非常轻量方便的翻译工具，不认识的单词，只要一划就能拿到翻译，比起调起翻译软件要方便许多。</p><h1 id="VSCode插件"><a href="#VSCode插件" class="headerlink" title="VSCode插件"></a>VSCode插件</h1><p>这里是一些我常用的VSCode插件。</p><h2 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h2><p>通常情况下，我们在开发中需要频繁的切换项目，这时候可能会打开很多个编辑器，容易手忙脚乱，这个插件可以让我们<strong>在一个编辑器中切换项目</strong>，非常方便。同时，project Manger提供了快捷键，可以使开发者不用鼠标就能实现在一个编辑器中切换项目，非常好使。</p><h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h2><p>这个插件在多人合作的开发模式中非常好使，<strong>你可以轻松方便的看到每一行代码最近的commit记录，包括时间和提交者</strong>，这非常有用，在排查问题的时候可以帮助你快速排查是否是线上问题。同时，该插件也提供了一些ui工具，比如可以方便的查看不同代码版本的diff等，非常好使。</p><h1 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h1><p><code>oh-my-zsh</code>提供了大量的<code>git</code>简化命令，说真的，如果不使用这些命令，每次敲完整的<code>git</code>命令都很麻烦，通常情况下，我会总是使用这些简化命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gaa <span class="comment">// git add .</span></span><br><span class="line">gcmsg <span class="comment">// git commit -m</span></span><br><span class="line">gp <span class="comment">// git push</span></span><br><span class="line">gm <span class="comment">// git merge</span></span><br><span class="line">gcm <span class="comment">// git checkout master</span></span><br><span class="line">gcb <span class="comment">// git checkout -b</span></span><br><span class="line">gloga <span class="comment">// git log --oneline --decorate --graph --all</span></span><br></pre></td></tr></table></figure><p>除了这些我经常会使用的命令，其余快捷指令可以在<a href="https://kapeli.com/cheat_sheets/Oh-My-Zsh_Git.docset/Contents/Resources/Documents/index">这里</a>看到。</p><p>这些快捷指令不能覆盖所有场景，我们也可以通过修改.zshrc文件来设置<code>git</code>快捷指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias gs=<span class="string">&#x27;git switch&#x27;</span></span><br><span class="line">alias gc-=<span class="string">&#x27;git checkout -&#x27;</span></span><br><span class="line">alias gpl=<span class="string">&#x27;git pull&#x27;</span></span><br></pre></td></tr></table></figure><p>然后我就可以通过<code>gs</code>和<code>gc-</code>来快速的切换分支和返回上一个分支，用<code>gpl</code>拉代码，非常方便。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>当我们开始使用一个新的界面或工具时，需要花费一些时间来适应新的工具，在这个过程中，我们可能会因为不熟悉工具使用而导致效率降低。随着我们逐渐熟悉这些工具，他们的效率会逐渐提高，并且在一定阈值后达到峰值。在这个峰值之后，我们的效率可能会因为工具数量过多而下降，导致工具提示临界负载的情况。</p><p>所以合理使用工具，使用适量的工具，使用适合自己的工具。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博客</title>
      <link href="/2023/06/12/blog/"/>
      <url>/2023/06/12/blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><p>坦白的讲，这是我的第五次做博客了，为啥会有这么多个呢？</p><p>早在大二那会，我就想搞个博客了，我一直觉得，如果有一天能有自己的网站，那一定是一件很酷的事情，所以在大二那会，我就开始搞了。</p><p>似乎每个学计算机的都会搞一个博客，我也不例外，第一个博客用最基本的前端三件套：<code>html</code>、<code>css</code>和<code>js</code>，没有任何组件库，纯手写，<code>mysql</code>存数据，然后用<code>node</code>搭了一个简单的服务器就完事了。现在想想其实挺佩服那时的自己的，毕竟纯手写是真的勇士。</p><p>但第一个博客并没有投入使用，因为我的热情在我手撸完所有代码后就已经消散殆尽了，我开始嫌弃丑的一批的ui，开始嫌弃简陋不堪的功能，似乎一切只是为了满足最开始的那个幻想。</p><p>于是我就有了第二个博客。</p><p>第二次我学聪明了，开始使用各种工具库、组件库。但是聪明不了一点，还是纯手撸啊喂！</p><p>为了客制化markdown效果，我有了自己的第三个博客，不过这个博客半路夭折了，因为工作量实在是太大了，光是搭建后台就已经花费了我太多精力，不过客制化的效果我很满意，毕竟是自己的东西，我想怎么写怎么写。</p><p><img src="/images/blog.jpeg"></p><p>有了前三次的经历，我不禁开始思考：<strong>我为什么要做这件事情？我的初衷是什么？</strong> 其实我大概只是想要个能写些什么的，然后属于自己的小天地吧。但是为了这个小天地，我花了大量时间造轮子，用别人造好的轮子造轮子，而我造的轮子还没别人的好，我应该把精力放在输出上，而不是死在输出的路上。</p><p>于是我开始关注<code>D2C</code>、<code>low code</code>相关方案，第四个博客其实只是一个试验品，于是这个博客就诞生了。</p><p>有了前几次的经验，这次我清楚的知道自己想要什么，什么功能是必须要有的，什么功能是无所谓的。至于样式这里，其实我一直都想做的尽可能的花里胡哨，但到头来还是返璞归真，觉得简单的东西才是最好的。</p><p>最后呢，这个博客还有很多需要优化调整的点，我会慢慢补齐。我会在这里记录我的生活，工作，和一些乱七八糟的事情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
