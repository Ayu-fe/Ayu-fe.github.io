<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>写给洋洋的信</title>
      <link href="/2023/11/12/tina/"/>
      <url>/2023/11/12/tina/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e9eefc6f79b7508415d8f764232d83d6a023a420ba8eb225d7e86c1a472255ed"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次C端性能优化总结</title>
      <link href="/2023/11/08/optimize/"/>
      <url>/2023/11/08/optimize/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>如果说b端比较重要的东西是核心链路的打通，那c端应该是最看重交互体验相关了。<br>半年前我们上线了一款新的项目，是一个端内h5。随着该项目的渗透率不断提升，保证线上稳定性和保证用户体验就是最重要的事情。<br>根据监控我们发现该页面的体验似乎并不是那么好，这里指首屏速度，直观的感受就是有明显的卡顿。</p><p>虽然我们对接口进行了优化，但整体看下来，页面的首屏速度还是不够快，这将影响用户对于我们产品的认知，也会影响到回访率、留资率等核心指标。<br>所以我们必须要用前端的手段进一步优化。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在做任何优化前，我们都应该先了解现状，了解现状需要通过指标衡量，在这个case中，由于框架层面已经提供了传统的优化手段，所以我们使用传统的浏览器性能指标就可以满足诉求。</p><p>在传统的浏览器性能指标中，FCP通常会被用作分析页面首屏速度</p><blockquote><p>FCP (First Contentful Paint) 为首次有内容渲染的时间点，在性能统计指标中，从用户开始访问 Web 页面的时间点到 FCP 的时间点这段时间可以被视为 无内容时间，也就是说在用户访问 Web 网页的过程中，FCP 时间点之前，用户看到的都是没有任何实际内容的屏幕，用户在这个阶段获取不到任何有用的信息。</p></blockquote><p>所以通常会反映页面的首次出现内容的时间，而首次出现内容时间会反映当前 Web 页面的网络加载性能情况、页面 DOM 结构复杂度情况、inline script 的执行效率的情况，当所有的阶段性能做的非常好的情况下，首次出现内容的时间就会越短，用户等待的时间就会越短，流失的概率就会降低</p><p>我们分别分析了pct75分位、pct90分位和99分位的fcp</p><p><img src="/images/optimize/fcp.jpeg"></p><p>我们发现大部分用户的FCP停留在2000ms左右，个别用户则是8000-9000ms，为了保证大部分用户的交互体验，我们决定使用pct75分位fcp作为性能衡量标准。</p><p>实际上，这个页面我们使用了全屏的骨架屏，但这个骨架屏并不能触发fcp，对于该指标，”内容”指的是文本、图像、<code>&lt;svg&gt;</code>元素或非白色的<code>&lt;canvas&gt;</code>元素。<br>所以骨架屏只是一个进阶版的loading，对fcp这种性能指标并无收益，我们需要其他方案。</p><h1 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h1><p>有了具体的性能指标，我们就可以针对该指标制定方案，由于这是一个端内的页面，并没有端外的强诉求，所以结合环境，我找到了以下几种方案</p><h2 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h2><blockquote><p>用户首次进入页面时，将应用渲染根节点（一般为 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>） 下的 DOM 内容保存到端内，用户再次打开页面后，客户端会在浏览器加载 HTML 之前，将之前替换为上一次保存的 HTML，最终浏览器在解析与渲染页面时，就可以立即加载出更丰富的 DOM 内容片段。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>如果命中snapshot，fcp会有较大的提升</li><li>接入成本较低</li><li>维护成本较低</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>依赖端内SDK</li><li>无法封装成统一的SDK，不同case需要按场景接入</li></ul><h2 id="NSR"><a href="#NSR" class="headerlink" title="NSR"></a>NSR</h2><blockquote><p>一个 React 项目的渲染实际还经历了「Evaluate Script -&gt; Data Fetching -&gt; Render（Create V-DOM &#x2F; V-DOM Diff） -&gt; Commit -&gt; DOM」 的漫长过程，为了避免这部分耗时，可以封装一个SDK提前渲染好页面的 HTML Markup。</p></blockquote><p>简单的说，就是在上一个页面提前加载好落地页的资源，然后在落地页实现秒开。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>如果命中NSR，fcp、tti等性能指标都会有较大提升</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>对场景要求严格，需要落地页有较高的转化率，因为需要前置加载资源，低转化率会造成大量不必要的服务端压力。</li><li>开发限制，浏览器端特定的代码只能在某些生命周期钩子中使用。</li><li>需要前置页面停留时长较长，前置页面停留时长过短会直接降低NSR命中率，降级后NSR反而会影响目标页面性能。</li><li>依赖端内SDK</li></ul><h2 id="SSR-x2F-Streaming-SSR-x2F-SSG"><a href="#SSR-x2F-Streaming-SSR-x2F-SSG" class="headerlink" title="SSR &#x2F; Streaming SSR &#x2F; SSG"></a>SSR &#x2F; Streaming SSR &#x2F; SSG</h2><blockquote><p>SSR，是 “Server Side Rendering” 的缩写，即服务端渲染。SSR 的运行流程是服务端完成静态 HTML 内容的生成，并直接返回给浏览器，这些静态 HTML 的内容需要经过 hydration 后才能进行用户交互。</p></blockquote><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>不依赖端内SDK</li><li>命中SSR，fcp、tti等性能指标都会有较大提升</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>改造成本高，如果是新项目还好，老项目迁移成本太高了</li><li>维护成本相对较高，对于不了解SSR的同学来说，维护SSR项目可能会有一定成本。</li></ul><p><strong>考虑到该项目的跳转入口较多，并不依赖前置页面，且无端外场景的强诉求，我们最终还是决定使用Snapshot</strong>。</p><h1 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h1><p>确定了技术方案，我们终于可以实施了，但是在实施前，我们还需要考虑一件事情：<strong>AB实验</strong>。<br><strong>公司能够稳定运行是靠业务支撑的，而做技术如果不为了业务服务，那也只是闭门造车而已。</strong><br>所以我们需要设计实验方案，验证性能优化对业务指标的提升。</p><h2 id="服务端实验or客户端实验"><a href="#服务端实验or客户端实验" class="headerlink" title="服务端实验or客户端实验"></a>服务端实验or客户端实验</h2><p>在似乎不应该是一个取舍难题，但他确实让我权衡了很久，如果使用服务端实验，团队内部已经有较好的实践，至少在开实验这里，我可以毫不费力的解决这件事情。<br>但是这是一个纯前端的技术方案，如果使用服务端实验会造成曝光不准的情况，简单的说就是所有用户都会被分流，所有用户都会被纳入实验结果的统计中，这将导致实验结果不置信。<br>客户端实验可以实现精准曝光，但客户端实验都是由客户端同学主导的，让客户端同学配合自己做这件事情显然不太现实，毕竟这对他们来说是一件毫无收益的事情，所以如何让前端同学自己主导客户端实验就成了一个问题。</p><p><strong>既然没有统一的方案，那我们就制定方案</strong>，具体方案就是和客户端对齐实验流程，升级JSB，使前端有统一的方式去获取实验数据。</p><h2 id="如何应用实验组和对照组"><a href="#如何应用实验组和对照组" class="headerlink" title="如何应用实验组和对照组"></a>如何应用实验组和对照组</h2><p>snapshot的开关是配置化的，而获取实验结果的时机是在js执行阶段，我们显然无法通过配置的手段控制snapshot的开关。所以只能通过是否使用snapshot的api来控制开关。</p><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>其实不管是否使用snapshot，任何方案都需要考虑降级，snapshot的降级是很容易做的，因为任何原因所导致的降级都无法正常使用snapshot的api，所以我们只需要保留历史的骨架屏即可。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>其实在整个过程中，最困难的不是技术方案的调研和如何敲代码，而是将资源聚合在自己这里。<br>snapshot的运行需要公司内部sdk的支持，但是我们的APP IOS侧并未全量接入这个sdk，在我最开始做这件事情的时候，我得到的消息是&gt;&#x3D;778就可以使用这个sdk了，但实际上，当我把方案在安卓端跑通，但死活在IOS上跑不通时，我才知道原来这个sdk的开关是由另一条业务线的实验控制的。</p><p>现在想起来，其实这才是我遇到的最大困难，因为ios侧即使开启了SDK，但是snapshot也跑不通，我需要IOS同学与SDK侧的同学帮我调试。<br>让其他业务线的不同职能帮助我与第三方SDK同学调试，这基本上不可能，对于其他业务线的同学而言，他们应该会想：滚，别来沾边。</p><p>这使得项目被卡住，这也让我意识到一点：<strong>如果我不能将研发资源聚合在自己业务里，那这件事情一定会失败。</strong><br>这里涉及很多个点：</p><ul><li>方案顺利落地：只有研发资源在自己业务线，方案才能继续推动</li><li>风险控制：风险控制应该已业务线为维度，我们不该依赖其他业务线，我们需要自己开实验控制SDK</li><li>命中率：如果其他业务线的实验未带来收益而导致实验关闭，那我们业务的ios用户将都无法命中方案</li></ul><p><strong>所以，为了保证项目顺利推进，我向我们业务测的客户端同学提出了技术需求，走正式的需求排期，同时也有测试接入，让整个项目的流程规范起来。</strong></p><h2 id="数据消费"><a href="#数据消费" class="headerlink" title="数据消费"></a>数据消费</h2><p>解决了上面的所有问题，我们该考虑数据消费了，公司有统一的数据消费平台，只是自动上报的性能指标并不能满足诉求。我们希望可以以最直观的方式看到实验组&amp;对照组带来的差异。<br>通常情况下，数据消费平台都会有两个基础而又核心的部分：<strong>指标&amp;维度</strong>，就像是一张表的横轴和纵轴。<br>在这个case里，指标是pct75分位fcp，维度是实验组&amp;对照组，数据消费平台当然不知道我们的维度是什么，所以我们需要手动上报性能指标，同时带上我们需要的维度。</p><p>除了性能指标，我们还需要关注snapshot命中率，SDK命中率。<br>因为不确定项目对实际用户的影响，所以在设计实验的时候也比较保守，最开始实验组&amp;对照组只各开了25%，然后逐渐放量到50%，等拿到业务收益后再推全实验组。<br><strong>这样做不仅可以控制风险，还可以更好的分析数据是否符合预期。</strong></p><h1 id="产出-amp-收益"><a href="#产出-amp-收益" class="headerlink" title="产出&amp;收益"></a>产出&amp;收益</h1><ul><li>整理snapshot接入文档</li><li>整理SDK使用文档</li><li>整理客户端AB实验规范</li></ul><h2 id="技术指标"><a href="#技术指标" class="headerlink" title="技术指标"></a>技术指标</h2><p><img src="/images/optimize/1.jpeg"><br>可以看到，在一定程度上，实验组99分位的速度比对照组75分位还要快，这个提升已经非常明显了。</p><p>然而单用fcp这样的指标并不能很好的衡量页面性能，比如在这个case里，使用snapshot并不能提升TTI，snapshot只是前置了页面展现时间，而TTI还是依赖接口速度。所以这时候我们应该考虑使用<strong>离线化</strong>方案，当然我们也确实接入了离线化方案。</p><blockquote><p>可交互时间 (TTI) 是测量加载响应度的重要实验室指标。该指标有助于识别看起来具备交互性但实际上并非如此的页面情况。迅捷的 TTI 有助于确保页面的有效性。 引用自 <a href="https://web.dev/tti">https://web.dev/tti</a></p></blockquote><p>离线化方案的优化维度和传统h5不一样，传统h5的优化无非就是代码的调整和资源的前置、加速等，但是再快的下载速度都比不上直接读取本地文件快。</p><h2 id="业务指标"><a href="#业务指标" class="headerlink" title="业务指标"></a>业务指标</h2><p>我们分析了线索UV、留资率、页面回访&amp;停留时长，指标均为正向。</p><p>关于性能优化对于业务指标的影响，首先你要相信，性能优化带来的收益最终一定会反应到业务收益上，如果没有，<strong>那就是性能优化的幅度不够</strong>。<br>举个例子，当前页面FCP是1000ms，然后你从1000优化到700，业务数据并没有提升，但当你优化到400的时候，就会有用户觉得，这个页面变得好快啊，而正是这一点的心理反应，可能引起他们的积极情绪和认知反应，从而业务数据就会提升。</p><h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><p>做到这里，这件事基本上就算是做完了，不过仔细想想，真的做完了吗？其实没有，作为一个技术专项，我们应该沉淀一套开箱即用的SDK，而不只是提供接入文档。<br>只是SDK的现状并不是那么稳定，我们需要考虑很多个点：</p><ul><li>是否有必要开箱即用？因为即便可以开箱即用，业务方还是需要根据业务诉求去定制快照</li><li>iOS sdk不稳定的原因是什么？</li><li>配置是否可以收敛到业务测？</li><li>配置流程是否可以自动化？</li><li>Snapshot的配置是否可以收敛到脚手架？</li><li>除此之外我们需要提供一个通用的snapshot的SDK</li></ul><p>而想要解决这些问题，那又可以开一个专项了，至少对于这个页面的性能优化而言，我觉得已经可以了。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这不仅让我想起学生时代准备面试时，有一道经典问题：聊聊性能优化。那时我肯定会和面试官聊webpack构建性能、传输性能，然后再讲讲网络层面，讲讲CDN啥的。现在想想，有点好笑。工作几年后才切实的明白，<strong>性能优化这个事情一定是case by case的，不同环境，不同场景的不同技术方案都会有不同的优化方案，没有一成不变的方案，尤其越是上层的优化，就越不成定式，就越要和业务结合在一起。</strong></p><p>这篇文档记录的东西，我可能这辈子再也用不到了，他甚至不算一篇技术文档，因为一行代码都没有，但最重要的是如何思考和如何从0到1做事。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理一些特殊场景的第三方库</title>
      <link href="/2023/08/08/package/"/>
      <url>/2023/08/08/package/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整理一些工作中遇到的特殊场景会用到的开源库，大部分都比较基础，可能一辈子都用不上，但是还是得心里有个数。</p><h4 id="虚拟滚动"><a href="#虚拟滚动" class="headerlink" title="虚拟滚动"></a>虚拟滚动</h4><p><a href="https://virtuoso.dev/">Virtuoso</a></p><p>虚拟滚动的场景在工作中并不常见，就算见到也不好直接手写，用开源的库会好一些，通常情况下，可以封装成一个通用的基础组件。</p><h4 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React Hook"></a>React Hook</h4><p><a href="https://ahooks.js.org/zh-CN/">aHooks</a></p><p>开源好用的hook库，这个还是比较常用的。</p><h4 id="H5表单"><a href="#H5表单" class="headerlink" title="H5表单"></a>H5表单</h4><p><a href="https://field-form-react-component.vercel.app/">rc-field-form</a></p><p>封装基础Form组件会用到</p><h4 id="WEB-3D"><a href="#WEB-3D" class="headerlink" title="WEB 3D"></a>WEB 3D</h4><p><a href="https://www.babylonjs.com/">Babylon</a></p><p>基于webgl的3d渲染引擎，值得学习。</p><h4 id="移动端拖拽-amp-动画"><a href="#移动端拖拽-amp-动画" class="headerlink" title="移动端拖拽&amp;动画"></a>移动端拖拽&amp;动画</h4><p><a href="https://use-gesture.netlify.app/">@use-gesture&#x2F;react</a></p><p><a href="https://www.react-spring.dev/">@react-spring&#x2F;web</a></p><p>这俩兄弟相辅相成，可以做很多移动端的拖拽动画效果，比如下拉刷新。</p><h4 id="文件操作相关"><a href="#文件操作相关" class="headerlink" title="文件操作相关"></a>文件操作相关</h4><p>find-up  寻找当前目录下的文件</p><p>fs-extra 文件读写</p><p>comment-json 更好的处理json文件</p><p>path 路径处理</p><p>prettier 格式化文件</p><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><p><a href="https://driverjs.com/">driver.js</a></p><p>h5预览高亮dom会用到，或者一些新手引导会用到</p><h4 id="性能监测"><a href="#性能监测" class="headerlink" title="性能监测"></a>性能监测</h4><p><a href="https://www.npmjs.com/package/web-vitals">web-vitals</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是如何使用自己的mac的</title>
      <link href="/2023/06/25/mac/"/>
      <url>/2023/06/25/mac/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h1><p>这里是一些我经常会使用的软件。</p><h2 id="hammerspoon"><a href="#hammerspoon" class="headerlink" title="hammerspoon"></a>hammerspoon</h2><p>这是目前为止我最喜欢用的一款效率办公软件，<strong>核心功能是为mac绑定各种快捷键，减少鼠标操作</strong>，从而提升工作效率。除了快速的打开应用，hammerspoon还可以通过键盘来操控窗口的大小和位置，鼠标定位等，可以让用户随意搭建自己喜欢的工作流，在这个过程中，完全不需要鼠标的参与。比如自从我开始使用hammerspoon后，就再也没有用过mac的全屏功能，虽然滑动切屏很有趣，但我更喜欢直接打开。</p><p>hammerspoon的本质是提供了系统api的桥接层，用户可以通过编写<code>lua</code>脚本来做很多系统层面的事情，当然，社区提供了大量有趣的配置文件，我们可以直接使用，我个人比较喜欢<code>awesome-hammerspoon</code>。</p><p><a href="https://github.com/Hammerspoon/hammerspoon/releases/tag/0.9.93">hammerspoon</a></p><p><a href="https://github.com/ashfinal/awesome-hammerspoon">awesome-hammerspoon配置文件</a></p><h2 id="ITerm2-amp-oh-my-zsh"><a href="#ITerm2-amp-oh-my-zsh" class="headerlink" title="ITerm2 &amp; oh-my-zsh"></a>ITerm2 &amp; oh-my-zsh</h2><p>想必每个程序员都会使用的默认终端替代方案。可以在官网自行下载，这里也搬运一下。</p><p><a href="https://iterm2.com/downloads.html">iterm2</a></p><p>oh-my-zsh下载方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;$(curl -fsSLhttps://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span></span><br></pre></td></tr></table></figure><p>on-my-zsh有很多的主题可选，我最喜欢的是<code>fino-time</code>，很好看。同时，iterm2也可以设置一些启动的快捷键，比如我的快捷键是<code>option + .</code>，通常情况下，我会开启多个终端管理我的所有项目。</p><h2 id="utools"><a href="#utools" class="headerlink" title="utools"></a>utools</h2><p>强大的插件生态，可以轻松的支持各种办公诉求，是mac自带的聚焦搜索的升级款。</p><p>通常情况下，我会用他打开一些系统软件，比如网络、设置等，因为其他应用软件的打开方式都被hammerspoon绑定了，utools刚好可以查漏补缺。其次，我通常会使用utools进行翻译，utools自带的翻译支持百度、有道、腾讯翻译等，非常方便。</p><p>除此之外，utools市场拥有大量的插件，比如OCR、计算器、chatgpt、还可以轻松查阅各种语言的文档，还有很多有用或没用的插件，十分有趣。</p><p>最后utools也支持一键唤出，默认是<code>option + space</code>，使用起来非常丝滑。</p><p><a href="https://www.u.tools/">utools官网</a></p><h2 id="nvm-amp-fnm"><a href="#nvm-amp-fnm" class="headerlink" title="nvm &amp; fnm"></a>nvm &amp; fnm</h2><p>每个学前端的都应该知道的node版本管理工具。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一键安装</span></span><br><span class="line">curl -o-<span class="attr">https</span>:<span class="comment">//raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh| bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .zshrc中添加环境变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">NVM_DIR</span>=<span class="string">&quot;$HOME/.nvm&quot;</span> </span><br><span class="line">[ -s <span class="string">&quot;$NVM_DIR/nvm.sh&quot;</span> ] &amp;&amp; . <span class="string">&quot;$NVM_DIR/nvm.sh&quot;</span> </span><br></pre></td></tr></table></figure><p>不过现在nvm其实有点过时了，<strong>现在比较推介fnm</strong>，nvm是用<code>Bash</code>脚本语言编写的，而fnm是用<code>Rust</code>编写的，懂的都懂。</p><blockquote><p>fnm 通过 Rust 语言提供了更快的安装和版本切换速度，并使用静态编译的方式打包二进制文件，因此不需要安装任何其他依赖项。此外，Rust 还提供了内存安全性和线程安全性，这使得 fnm 更加可靠和安全。</p></blockquote><p>使用fnm后，开启新终端时就不用等2s了，每次加载nvm的配置文件都很慢，<code>Rust</code>yyds</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装rust环境 装过的就不用再装了</span></span><br><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1<span class="number">.2</span> -sSf <span class="attr">https</span>:<span class="comment">//sh.rustup.rs | sh  </span></span><br><span class="line"><span class="comment">// 下载fnm</span></span><br><span class="line">curl -fsSL <span class="attr">https</span>:<span class="comment">//github.com/Schniz/fnm/raw/master/.ci/install.sh | bash -s -- --skip-shell</span></span><br><span class="line"><span class="comment">// .zshrc中设置环境变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="string">&quot;$HOME/.fnm:$PATH&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;$(fnm env)&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Charles-amp-Proxyman"><a href="#Charles-amp-Proxyman" class="headerlink" title="Charles &amp; Proxyman"></a>Charles &amp; Proxyman</h2><p>在整理效率软件的时候我在想是否要把Charles写进来，因为严格意义上讲，Charles并不是一款效率软件，而是一款办公软件，之所以决定写进来是因为其实在一些大公司中，代理相关的工具一般不会使用Charles，而是倾向于集成在工程内部，这样不仅提升了办公效率，也对新同学更加友好，而带来的问题就是对新同学过于黑盒，一条命令行语句就能完成所有操作，反而导致出现问题后无从下手，无法排查问题。</p><p>所以我觉得，熟练使用一个第三方的代理工具，并且知道自己在做什么是非常重要的，这样即便脱离了工程化工具，也能轻松的做很多代理相关的事情，这也是一种效率吧。后续我会专门写一篇文章来讲一讲Charles的使用。</p><p>当然，Charles并不是唯一的代理方案，<strong>现在我可能会更推荐使用proxyman</strong>，听说性能比Charles好很多，还是很香的，以后可以考虑用一用。</p><p><a href="https://www.charlesproxy.com/">Charles官网</a></p><p><a href="https://proxyman.io/">Proxyman官网</a></p><h1 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h1><p>这里是一些我常用的Chrome插件。</p><h2 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h2><p><strong>一键切换是否需要系统代理。</strong>小工具，大作用，当我们不希望当前浏览的页面被系统级别的代理所代理时，这个插件可以帮助我们完成快速切换，非常方便。</p><h2 id="ModHeader-amp-Requestly"><a href="#ModHeader-amp-Requestly" class="headerlink" title="ModHeader &amp; Requestly"></a>ModHeader &amp; Requestly</h2><p>ModHeader是几乎每位参与开发Web应用的互联网人都会使用的插件，可以<strong>轻松快捷的添加、修改请求头、响应头。</strong>在使用泳道模式进行开发测试的今天，这样的小工具会非常方便，虽说代理工具也可以完成这个插件的所有工作，但在浏览器中快速的启动难道不是更香吗？</p><p>ModHeader最大的问题就是，不能为规则命名，通常情况下我们会添加多条规则，其实很麻烦，并且同时开发多个项目时，容易不知道哪个规则对应哪个。Requestly解决了这个问题，<strong>Requestly提供了更加规范、更加体系化的功能，可以使用户更加清晰明确的管理自己的规则</strong>，很好用。</p><h2 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a>Vimium</h2><p><strong>在浏览器中使用vim的操作处理一切！</strong>是不是很酷，然而vim的上手成本较高，在提效前会有很长很长一段蛋疼的时间。其实我自己也并不熟练，但是翻页什么的还是可以用用的哈哈。</p><h2 id="沙拉滑词"><a href="#沙拉滑词" class="headerlink" title="沙拉滑词"></a>沙拉滑词</h2><p>非常轻量方便的翻译工具，不认识的单词，只要一划就能拿到翻译，比起调起翻译软件要方便许多。</p><h1 id="VSCode插件"><a href="#VSCode插件" class="headerlink" title="VSCode插件"></a>VSCode插件</h1><p>这里是一些我常用的VSCode插件。</p><h2 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h2><p>通常情况下，我们在开发中需要频繁的切换项目，这时候可能会打开很多个编辑器，容易手忙脚乱，这个插件可以让我们<strong>在一个编辑器中切换项目</strong>，非常方便。同时，project Manger提供了快捷键，可以使开发者不用鼠标就能实现在一个编辑器中切换项目，非常好使。</p><h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h2><p>这个插件在多人合作的开发模式中非常好使，<strong>你可以轻松方便的看到每一行代码最近的commit记录，包括时间和提交者</strong>，这非常有用，在排查问题的时候可以帮助你快速排查是否是线上问题。同时，该插件也提供了一些ui工具，比如可以方便的查看不同代码版本的diff等，非常好使。</p><h1 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h1><p><code>oh-my-zsh</code>提供了大量的<code>git</code>简化命令，说真的，如果不使用这些命令，每次敲完整的<code>git</code>命令都很麻烦，通常情况下，我会总是使用这些简化命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gaa <span class="comment">// git add .</span></span><br><span class="line">gcmsg <span class="comment">// git commit -m</span></span><br><span class="line">gp <span class="comment">// git push</span></span><br><span class="line">gm <span class="comment">// git merge</span></span><br><span class="line">gcm <span class="comment">// git checkout master</span></span><br><span class="line">gcb <span class="comment">// git checkout -b</span></span><br><span class="line">gloga <span class="comment">// git log --oneline --decorate --graph --all</span></span><br></pre></td></tr></table></figure><p>除了这些我经常会使用的命令，其余快捷指令可以在<a href="https://kapeli.com/cheat_sheets/Oh-My-Zsh_Git.docset/Contents/Resources/Documents/index">这里</a>看到。</p><p>这些快捷指令不能覆盖所有场景，我们也可以通过修改.zshrc文件来设置<code>git</code>快捷指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias gs=<span class="string">&#x27;git switch&#x27;</span></span><br><span class="line">alias gc-=<span class="string">&#x27;git checkout -&#x27;</span></span><br><span class="line">alias gpl=<span class="string">&#x27;git pull&#x27;</span></span><br></pre></td></tr></table></figure><p>然后我就可以通过<code>gs</code>和<code>gc-</code>来快速的切换分支和返回上一个分支，用<code>gpl</code>拉代码，非常方便。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>当我们开始使用一个新的界面或工具时，需要花费一些时间来适应新的工具，在这个过程中，我们可能会因为不熟悉工具使用而导致效率降低。随着我们逐渐熟悉这些工具，他们的效率会逐渐提高，并且在一定阈值后达到峰值。在这个峰值之后，我们的效率可能会因为工具数量过多而下降，导致工具提示临界负载的情况。</p><p>所以合理使用工具，使用适量的工具，使用适合自己的工具。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博客</title>
      <link href="/2023/06/12/blog/"/>
      <url>/2023/06/12/blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><p>坦白的讲，这是我的第五次做博客了，为啥会有这么多个呢？</p><p>早在大二那会，我就想搞个博客了，我一直觉得，如果有一天能有自己的网站，那一定是一件很酷的事情，所以在大二那会，我就开始搞了。</p><p>似乎每个学计算机的都会搞一个博客，我也不例外，第一个博客用最基本的前端三件套：<code>html</code>、<code>css</code>和<code>js</code>，没有任何组件库，纯手写，<code>mysql</code>存数据，然后用<code>node</code>搭了一个简单的服务器就完事了。现在想想其实挺佩服那时的自己的，毕竟纯手写是真的勇士。</p><p>但第一个博客并没有投入使用，因为我的热情在我手撸完所有代码后就已经消散殆尽了，我开始嫌弃丑的一批的ui，开始嫌弃简陋不堪的功能，似乎一切只是为了满足最开始的那个幻想。</p><p>于是我就有了第二个博客。</p><p>第二次我学聪明了，开始使用各种工具库、组件库。但是聪明不了一点，还是纯手撸啊喂！</p><p>为了客制化markdown效果，我有了自己的第三个博客，不过这个博客半路夭折了，因为工作量实在是太大了，光是搭建后台就已经花费了我太多精力，不过客制化的效果我很满意，毕竟是自己的东西，我想怎么写怎么写。</p><p><img src="/images/blog.jpeg"></p><p>有了前三次的经历，我不禁开始思考：<strong>我为什么要做这件事情？我的初衷是什么？</strong> 其实我大概只是想要个能写些什么的，然后属于自己的小天地吧。但是为了这个小天地，我花了大量时间造轮子，用别人造好的轮子造轮子，而我造的轮子还没别人的好，我应该把精力放在输出上，而不是死在输出的路上。</p><p>于是我开始关注<code>D2C</code>、<code>low code</code>相关方案，第四个博客其实只是一个试验品，于是这个博客就诞生了。</p><p>有了前几次的经验，这次我清楚的知道自己想要什么，什么功能是必须要有的，什么功能是无所谓的。至于样式这里，其实我一直都想做的尽可能的花里胡哨，但到头来还是返璞归真，觉得简单的东西才是最好的。</p><p>最后呢，这个博客还有很多需要优化调整的点，我会慢慢补齐。我会在这里记录我的生活，工作，和一些乱七八糟的事情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
